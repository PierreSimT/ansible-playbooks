# Playbook para crear MVs para montar un cluster de Kubernetes con 
# kubespray
#
---
- name: Clonando MVs para montar hosts de Kubernetes
  hosts: localhost
  gather_facts: false

# En este archivo incluir la clave del usuario ULL
# para acceder a IaaS.ull.es via API REST

  vars_files:
    - vblancoULL.yaml

# Clave publica de  usuario en la maquina Ansible
  vars:
    ssh_keys: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjsBsaXOE1p6dcDCtQpJg4OCT8VbYzMzgZzPt2PtFsJUKkLTCRmYxuLcJBG/tyvy5p3dgGjmbLx8W//vR8kmO4dR9JORPTgh6TeY7cvzbO8Cpxqk1K/V+/C+dmxj45J7HYi2cUy9U9ym+jay8C70whu8rNh+GpTUxNGHtYXEFUUWSv1P2xPb7ZbBxoMSU1i9uxsd4BAZNW6oi/1B5JPvIhIEPWjpEbxCLc8xnUO/mVF5JqU2EkFrPOvvr1VUNIiN3t8Y0tQzyu9gz+Lr+UOgukJH+yKatCRJTbAM1SGFWb7eMqV+CaVLoxzdMfweLWq8hmYwESFbUoWc1o7waXh7Tl usuario@DevOps-Ansible


# Nodos a crear. Se pueden pasa parametros de ip, gateway, ...
# 
    nodes:
      - name: dockernode-10
        ip: 172.20.20.110
      - name: dockernode-11
        ip: 172.20.20.111
      - name: dockernode-12
        ip: 172.20.20.112

# Definir interfaces en los nodos. nic1 es por defecto DOC1 en IaaS ULL
# no se puede cambiar (al menos con estas imagenes)

    node_nics: 
      - name: nic1
      - name: nic2
        profile_name: DOCP2P-4019

  tasks:
    - name: Login to IaaS
      ovirt_auth:
        url: https://iaas.ull.es/ovirt-engine/api
        insecure: yes
        username: vblanco@ULL
        password: "{{ ovirt_password }}"
        headers:
          filter: true

# Tarea para crear la MV. OJO!. Hay que parchear el modulo
# ovirt_vm.py cableando cluster a Cluster-Rojo. Asegurarse de
# utilizar plantillas con cloud-init instalado

    - name: Create a VM
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        cluster: Cluster-Rojo
        name: "DevOps-Profesor-{{ item.name }}"
        template: debian-10-cloudinit
        storage_domain: iaasa04
        nics: "{{ node_nics }}"
        state: present
        wait: yes
      with_items: "{{ nodes }}"

# Tarea para configurar la MV con cloud-init
# Centos7: usar eth0, eth1, ... para interfaces de red
# debian-10-cloudinit: usar ens3, ens4, ... 

    - name: Update VM via cloud-init
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "DevOps-Profesor-{{ item.name }}"
        state: running
        cloud_init_nics:
          - nic_name: ens3
            nic_boot_protocol: dhcp
            nic_on_boot: yes
          - nic_name: ens4
            nic_boot_protocol: static
            nic_ip_address: "{{ item.ip }}"      
            nic_netmask: 255.255.255.0
            nic_on_boot: True
#
# La clave encriptada es 
# root_password: alumno2019
#
        cloud_init:
          host_name: "{{ item.name }}"
          user_name: ansible
          root_password: $6$GJ97KhPORaN.xH9.$VaSQfH3.wcbmzqn1Nj2f8fzt/rEiXqQqPm.AtrJLIILYkZsqlBo0Psw8rcpvvlSvWq80VLkNOADIBulaOfsa51
          authorized_ssh_keys: "{{ ssh_keys }}"
          custom_script: |
            runcmd:
              - sed -i '/AllowUsers/c\AllowUsers adminstic usuario soporteiass ansible hadoop' /etc/ssh/sshd_config
              - systemctl restart sshd
        wait: yes
      with_items: "{{ nodes }}"

    - name: Cleanup IaaS auth token
      ovirt_auth:
        ovirt_auth: "{{ ovirt_auth }}"
        state: absent
